name: Build Latest Version

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            runner: macos-latest
          - target: aarch64-apple-darwin
            runner: macos-latest
          - target: x86_64-pc-windows-msvc
            runner: windows-latest
    
    runs-on: ${{ matrix.settings.runner }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version info
        id: version
        run: |
          # Get version from Cargo.toml
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            VERSION=$(grep '^version = ' apps/desktop/src-tauri/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          else
            VERSION=$(grep '^version = ' apps/desktop/src-tauri/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
        shell: bash
          
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.settings.target }}
          
      - uses: ./.github/actions/setup-js

      - name: Create API Key File (macOS)
        if: matrix.settings.runner == 'macos-latest'
        run: |
          echo "${{ secrets.APPLE_API_KEY_FILE }}" | base64 --decode > api.p8
          chmod 600 api.p8

      - name: Import Apple certificates (macOS)
        if: matrix.settings.runner == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Verify certificate (macOS)
        if: matrix.settings.runner == 'macos-latest'
        run: security find-identity -v -p codesigning ${{ runner.temp }}/build.keychain
      
      - name: Create .env file
        run: |
          echo "appVersion=${{ steps.version.outputs.version }}" >> .env
          echo "VITE_ENVIRONMENT=production" >> .env
          echo "VITE_SERVER_URL=https://cap.so" >> .env
          echo "NEXT_PUBLIC_WEB_URL=https://cap.so" >> .env
          echo "NEXTAUTH_URL=https://cap.so" >> .env
          echo "NEXT_PUBLIC_CAP_AWS_REGION=us-east-1" >> .env
          echo "NEXT_PUBLIC_CAP_AWS_BUCKET=cap-so-public" >> .env
          echo "RUST_TARGET_TRIPLE=${{ matrix.settings.target }}" >> .env
        shell: bash
          
      - name: Copy .env to desktop app
        run: cp .env apps/desktop/.env
        shell: bash
        
      - name: Build app
        working-directory: apps/desktop
        run: |
          pnpm -w cap-setup
          pnpm build:tauri --target ${{ matrix.settings.target }} --config src-tauri/tauri.opensource.conf.json
        env:
          # https://github.com/tauri-apps/tauri-action/issues/740
          CI: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUST_TARGET_TRIPLE: ${{ matrix.settings.target }}
          TAURI_ENV_TARGET_TRIPLE: ${{ matrix.settings.target }}
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
          # Apple codesigning (macOS only)
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          # Apple notarization (macOS only)
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: ${{ github.workspace }}/api.p8
          APPLE_KEYCHAIN: ${{ runner.temp }}/build.keychain
          
      - name: Prepare artifacts (macOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p artifacts
          cd target/${{ matrix.settings.target }}/release
          
          # Copy the CLI binary if it exists
          if [ -f "cap" ]; then
            cp cap "$GITHUB_WORKSPACE/artifacts/cap-${{ matrix.settings.target }}"
            chmod +x "$GITHUB_WORKSPACE/artifacts/cap-${{ matrix.settings.target }}"
          fi
          
          # Create zip of .app bundle if it exists
          if [ -d "bundle/macos" ]; then
            find bundle/macos -name "*.app" -exec sh -c 'cd "$(dirname "{}")" && zip -r "$GITHUB_WORKSPACE/artifacts/$(basename "{}").zip" "$(basename "{}")"' \;
          fi
          
          # Copy .dmg if it exists
          if [ -d "bundle/dmg" ]; then
            find bundle/dmg -name "*.dmg" -exec cp {} "$GITHUB_WORKSPACE/artifacts/" \;
          fi
          
      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          cd target/${{ matrix.settings.target }}/release
          
          # Copy the CLI binary if it exists
          if (Test-Path "cap.exe") {
            Copy-Item "cap.exe" "$env:GITHUB_WORKSPACE/artifacts/cap-${{ matrix.settings.target }}.exe"
          }
          
          # Copy MSI installer if it exists
          if (Test-Path "bundle/msi") {
            Get-ChildItem "bundle/msi/*.msi" | ForEach-Object {
              Copy-Item $_.FullName "$env:GITHUB_WORKSPACE/artifacts/"
            }
          }
          
          # Copy NSIS installer if it exists
          if (Test-Path "bundle/nsis") {
            Get-ChildItem "bundle/nsis/*.exe" | ForEach-Object {
              Copy-Item $_.FullName "$env:GITHUB_WORKSPACE/artifacts/"
            }
          }
        shell: powershell
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cap-desktop-${{ matrix.settings.target }}
          path: artifacts/
          retention-days: 30
          
      - name: List prepared artifacts (debug)
        run: |
          echo "=== Artifacts prepared for ${{ matrix.settings.target }} ==="
          ls -la artifacts/ || echo "No artifacts directory"
        shell: bash

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.create_release && always() && needs.build.result == 'success' }}
    
    steps:
      - uses: actions/checkout@v4
          
      - name: Get version info
        id: version
        run: |
          VERSION=$(grep '^version = ' apps/desktop/src-tauri/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: List release artifacts (debug)
        run: |
          echo "=== Artifact directories ==="
          ls -la release-artifacts/
          echo "=== Total file count ==="
          find release-artifacts -type f | wc -l
          echo "=== App bundles and installers ==="
          find release-artifacts -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.msi" -o -name "cap-*" -o -name "Cap-*" 2>/dev/null || echo "No app files found"
        shell: bash
          
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "build-v${{ steps.version.outputs.version }}-${{ github.run_number }}"
          name: "Cap Desktop v${{ steps.version.outputs.version }} (Build #${{ github.run_number }})"
          draft: false
          prerelease: false
          body: |
            # Cap Desktop v${{ steps.version.outputs.version }}
            
            **Open Source Build** - Built from the latest source code
            
            ## 📦 Downloads
            - **macOS**: Look for `.dmg` installers or `.zip` app bundles
            - **Windows**: Look for `.exe` or `.msi` installer files
            
            ## ℹ️ Build Info
            - **Built from**: `${{ github.ref }}`
            - **Commit**: `${{ github.sha }}`
            - **Build number**: `#${{ github.run_number }}`
            - **Date**: `${{ github.event.head_commit.timestamp }}`
            
            > 🔓 No commercial license required for this build
          files: |
            release-artifacts/**/*.dmg
            release-artifacts/**/*.zip
            release-artifacts/**/*.exe
            release-artifacts/**/*.msi
            release-artifacts/**/cap-*
            release-artifacts/**/Cap-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 